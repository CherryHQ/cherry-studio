name: Build and Release

on:
  push:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g. v1.1.0)"
        required: true
        default: "v1.1.0"

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            artifacts:
              - Cherry-Studio-*-portable.exe
              - Cherry-Studio-*-setup.exe
              - Cherry-Studio-*-setup.exe.blockmap
              - latest.yml
          - os: ubuntu-latest
            platform: linux
            artifacts:
              - Cherry-Studio-*-x86_64.AppImage
              - Cherry-Studio-*-arm64.AppImage
              - latest-linux.yml
              - latest-linux-arm64.yml
          - os: macos-latest
            platform: mac
            artifacts:
              - Cherry-Studio-*-x64.dmg
              - Cherry-Studio-*-x64.dmg.blockmap
              - Cherry-Studio-*-x64.zip
              - Cherry-Studio-*-x64.zip.blockmap
              - Cherry-Studio-*-arm64.dmg
              - Cherry-Studio-*-arm64.dmg.blockmap
              - Cherry-Studio-*-arm64.zip
              - Cherry-Studio-*-arm64.zip.blockmap
              - latest-mac.yml
      fail-fast: false

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Get version
        id: get-version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.tag }}" != "" ]; then
            VERSION="${{ github.event.inputs.tag }}"
            VERSION=${VERSION#v}
            echo "Running workflow dispatch with tag: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Running on tag: v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # For regular commits, use the current timestamp as version
            VERSION="dev-$(date +'%Y%m%d%H%M%S')"
            echo "Running on commit: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install corepack
        run: corepack enable && corepack prepare yarn@4.3.1 --activate

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install

      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          yarn build:npm linux
          yarn build:linux

        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RENDERER_VITE_AIHUBMIX_SECRET: ${{ vars.RENDERER_VITE_AIHUBMIX_SECRET }}

      - name: Build Mac
        if: matrix.os == 'macos-latest'
        run: |
          yarn build:npm mac
          yarn build:mac
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ vars.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ vars.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ vars.APPLE_TEAM_ID }}
          RENDERER_VITE_AIHUBMIX_SECRET: ${{ vars.RENDERER_VITE_AIHUBMIX_SECRET }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: yarn build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RENDERER_VITE_AIHUBMIX_SECRET: ${{ vars.RENDERER_VITE_AIHUBMIX_SECRET }}

      - name: Replace spaces in filenames
        run: node scripts/replace-spaces.js

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.platform }}
          path: ${{ matrix.artifacts }}

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Get release tag
        id: get-tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find all-artifacts -type f -not -path "*/\.*" -exec cp {} release/ \;

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          allowUpdates: true
          makeLatest: false
          tag: ${{ steps.get-tag.outputs.tag }}
          artifacts: "release/*"
          token: ${{ secrets.GITHUB_TOKEN }}
