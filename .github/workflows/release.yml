name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'
  push:
    tags:
      - v*.*.*

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
      fail-fast: false

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release tag
        id: get-tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: macos-latest dependencies fix
        if: matrix.os == 'macos-latest'
        run: |
          brew install python-setuptools

      - name: Install corepack
        run: corepack enable && corepack prepare yarn@4.6.0 --activate

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install

      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          yarn build:npm linux
          yarn build:linux

        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RENDERER_VITE_AIHUBMIX_SECRET: ${{ vars.RENDERER_VITE_AIHUBMIX_SECRET }}
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Build Mac
        if: matrix.os == 'macos-latest'
        run: |
          sudo -H pip install setuptools
          yarn build:npm mac
          yarn build:mac
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ vars.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ vars.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ vars.APPLE_TEAM_ID }}
          RENDERER_VITE_AIHUBMIX_SECRET: ${{ vars.RENDERER_VITE_AIHUBMIX_SECRET }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: |
          yarn build:npm windows
          yarn build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RENDERER_VITE_AIHUBMIX_SECRET: ${{ vars.RENDERER_VITE_AIHUBMIX_SECRET }}
          NODE_OPTIONS: --max-old-space-size=8192

      # AI-Generated Release Notes
      - name: Generate AI Release Notes
        id: ai-release-notes
        if: matrix.os == 'ubuntu-latest'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = "${{ steps.get-tag.outputs.tag }}";
            
            // Get commits since last release
            let commits = [];
            try {
              // Get the previous release tag
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 10
              });
              
              const previousTag = releases.find(r => r.tag_name !== tag)?.tag_name;
              
              if (previousTag) {
                // Get commits between tags
                const { data: comparison } = await github.rest.repos.compareCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  base: previousTag,
                  head: tag
                });
                commits = comparison.commits;
              }
            } catch (error) {
              console.log('Could not get previous release, using recent commits');
              const { data: recentCommits } = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 20
              });
              commits = recentCommits;
            }
            
            // Analyze commits and categorize changes
            const features = [];
            const fixes = [];
            const improvements = [];
            const breaking = [];
            
            commits.forEach(commit => {
              const message = commit.commit.message.toLowerCase();
              const firstLine = commit.commit.message.split('\n')[0];
              
              if (message.includes('breaking change') || message.includes('breaking:')) {
                breaking.push(firstLine);
              } else if (message.startsWith('feat:') || message.includes('feature')) {
                features.push(firstLine);
              } else if (message.startsWith('fix:') || message.includes('fix')) {
                fixes.push(firstLine);
              } else if (message.startsWith('perf:') || message.includes('improve') || message.includes('optimize')) {
                improvements.push(firstLine);
              }
            });
            
            // Generate release notes
            let releaseNotes = `# Release ${tag}\n\n`;
            releaseNotes += `## 🎉 What's New\n\n`;
            
            if (breaking.length > 0) {
              releaseNotes += `### ⚠️ Breaking Changes\n`;
              breaking.forEach(change => releaseNotes += `- ${change}\n`);
              releaseNotes += '\n';
            }
            
            if (features.length > 0) {
              releaseNotes += `### ✨ New Features\n`;
              features.forEach(feat => releaseNotes += `- ${feat}\n`);
              releaseNotes += '\n';
            }
            
            if (improvements.length > 0) {
              releaseNotes += `### 🚀 Improvements\n`;
              improvements.forEach(imp => releaseNotes += `- ${imp}\n`);
              releaseNotes += '\n';
            }
            
            if (fixes.length > 0) {
              releaseNotes += `### 🐛 Bug Fixes\n`;
              fixes.forEach(fix => releaseNotes += `- ${fix}\n`);
              releaseNotes += '\n';
            }
            
            // Add platform-specific notes
            releaseNotes += `## 📦 Platform Support\n\n`;
            releaseNotes += `This release includes builds for:\n`;
            releaseNotes += `- Windows (x64, arm64)\n`;
            releaseNotes += `- macOS (x64, arm64)\n`;
            releaseNotes += `- Linux (x86_64, arm64)\n\n`;
            
            // Add footer
            releaseNotes += `## 🙏 Acknowledgments\n\n`;
            releaseNotes += `Thanks to all contributors who made this release possible!\n\n`;
            releaseNotes += `---\n`;
            releaseNotes += `*Release notes generated with AI assistance*\n`;
            
            // Save to file for the release action
            const fs = require('fs');
            fs.writeFileSync('release-notes.md', releaseNotes);
            
            core.setOutput('release_notes', releaseNotes);

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          allowUpdates: true
          makeLatest: false
          tag: ${{ steps.get-tag.outputs.tag }}
          artifacts: 'dist/*.exe,dist/*.zip,dist/*.dmg,dist/*.AppImage,dist/*.snap,dist/*.deb,dist/*.rpm,dist/*.tar.gz,dist/latest*.yml,dist/rc*.yml,dist/*.blockmap'
          bodyFile: ${{ matrix.os == 'ubuntu-latest' && 'release-notes.md' || '' }}
          token: ${{ secrets.GITHUB_TOKEN }}

  dispatch-docs-update:
    needs: release
    if: success() && github.repository == 'CherryHQ/cherry-studio' # 确保所有构建成功且在主仓库中运行
    runs-on: ubuntu-latest
    steps:
      - name: Get release tag
        id: get-tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Check if tag is pre-release
        id: check-tag
        shell: bash
        run: |
          TAG="${{ steps.get-tag.outputs.tag }}"
          if [[ "$TAG" == *"rc"* || "$TAG" == *"pre-release"* ]]; then
            echo "is_pre_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_pre_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Dispatch update-download-version workflow to cherry-studio-docs
        if: steps.check-tag.outputs.is_pre_release == 'false'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: CherryHQ/cherry-studio-docs
          event-type: update-download-version
          client-payload: '{"version": "${{ steps.get-tag.outputs.tag }}"}'
