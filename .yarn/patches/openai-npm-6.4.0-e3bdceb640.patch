diff --git a/azure.js b/azure.js
index 90638e3ca941678f4ebecaad3a1246b220f96e07..955d2d1a873545c7839576b0438a0a636ef68a47 100644
--- a/azure.js
+++ b/azure.js
@@ -68,7 +68,13 @@ class AzureOpenAI extends client_1.OpenAI {
             if (!(0, utils_1.isObj)(options.body)) {
                 throw new Error('Expected request body to be an object');
             }
-            const model = this.deploymentName || options.body['model'] || options.__metadata?.['model'];
+            let model = this.deploymentName || options.body['model'] || options.__metadata?.['model'];
+            if (model === undefined && typeof options.body?.get === 'function') {
+                const formModel = options.body.get('model');
+                if (typeof formModel === 'string') {
+                    model = formModel;
+                }
+            }
             if (model !== undefined && !this.baseURL.includes('/deployments')) {
                 options.path = `/deployments/${model}${options.path}`;
             }
diff --git a/azure.mjs b/azure.mjs
index 7bbc0aaad540a778cfd9310f0f0b7fa90859e0b0..82479e97040765a4354a047e4565d67826a30247 100644
--- a/azure.mjs
+++ b/azure.mjs
@@ -64,7 +64,13 @@ export class AzureOpenAI extends OpenAI {
             if (!isObj(options.body)) {
                 throw new Error('Expected request body to be an object');
             }
-            const model = this.deploymentName || options.body['model'] || options.__metadata?.['model'];
+            let model = this.deploymentName || options.body['model'] || options.__metadata?.['model'];
+            if (model === undefined && typeof options.body?.get === 'function') {
+                const formModel = options.body.get('model');
+                if (typeof formModel === 'string') {
+                    model = formModel;
+                }
+            }
             if (model !== undefined && !this.baseURL.includes('/deployments')) {
                 options.path = `/deployments/${model}${options.path}`;
             }
diff --git a/resources/embeddings.js b/resources/embeddings.js
index 2404264d4ba0204322548945ebb7eab3bea82173..93ba930480c0692c203c3ddec155fde334f80ec9 100644
--- a/resources/embeddings.js
+++ b/resources/embeddings.js
@@ -22,6 +22,9 @@ class Embeddings extends resource_1.APIResource {
         // No encoding_format specified, defaulting to base64 for performance reasons
         // See https://github.com/openai/openai-node/pull/1312
         let encoding_format = hasUserProvidedEncodingFormat ? body.encoding_format : 'base64';
+        if (body.model.includes("jina")) {
+            encoding_format = undefined;
+        }
         if (hasUserProvidedEncodingFormat) {
             (0, utils_1.loggerFor)(this._client).debug('embeddings/user defined encoding_format:', body.encoding_format);
         }
@@ -33,7 +36,7 @@ class Embeddings extends resource_1.APIResource {
             ...options,
         });
         // if the user specified an encoding_format, return the response as-is
-        if (hasUserProvidedEncodingFormat) {
+        if (hasUserProvidedEncodingFormat || body.model.includes("jina")) {
             return response;
         }
         // in this stage, we are sure the user did not specify an encoding_format
diff --git a/resources/embeddings.mjs b/resources/embeddings.mjs
index 19dcaef578c194a89759c4360073cfd4f7dd2cbf..70689b37b1fba96d35ed20a1b7c3d8de32a66f7d 100644
--- a/resources/embeddings.mjs
+++ b/resources/embeddings.mjs
@@ -22,6 +22,9 @@ export class Embeddings extends APIResource {
         if (hasUserProvidedEncodingFormat) {
             loggerFor(this._client).debug('embeddings/user defined encoding_format:', body.encoding_format);
         }
+        if (body.model.includes("jina")) {
+            encoding_format = undefined;
+        }
         const response = this._client.post('/embeddings', {
             body: {
                 ...body,
@@ -30,7 +33,7 @@ export class Embeddings extends APIResource {
             ...options,
         });
         // if the user specified an encoding_format, return the response as-is
-        if (hasUserProvidedEncodingFormat) {
+        if (hasUserProvidedEncodingFormat || body.model.includes("jina")) {
             return response;
         }
         // in this stage, we are sure the user did not specify an encoding_format
